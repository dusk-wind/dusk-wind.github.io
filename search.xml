<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>next主题美化</title>
    <url>/2024/08/03/next%E4%B8%BB%E9%A2%98%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<p>以下是本人对于next主题美化和魔改的一些经验</p>
<span id="more"></span>
<ol>
<li><h3 id="音乐播放器的添加"><a href="#音乐播放器的添加" class="headerlink" title="音乐播放器的添加"></a>音乐播放器的添加</h3> 1.1我的音乐播放器是使用的是网易云音乐自动生成的外链插件。<br>打开网易云音乐，将喜欢的歌加入创建的歌单中，然后点击生成外链。</li>
</ol>
<p style="text-align: center;">
    <img src="\images\网易云外链.png" alt="网易云外链">
</p>

<pre><code>1.2选择合适的插件和尺寸，并复制HTML代码。
  我的博客网站是基于hexo框架搭建的，所以ifram插件可以使用。
</code></pre>
<p style="text-align: center;">
    <img src="\images\外链插件复制.png" alt="网易云外链">
</p>
    1.3代码插入与修改
    打开/themes/next/layout/_macro/sidebar.njk文件,在下面的位置插入刚才复制的HTML代码

<p style="text-align: center;">
    <img src="\images\外链代码插入.png" alt="网易云外链">
</p>
    在next主题的_config.yml文件中写下以下代码

<pre><code> music:
      enable: true
      autoplay: true #自动播放
    
**至此，音乐播放器功能就可以使用了，下面是一些优化**

1.4音乐播放器刷新网页间断问题的解决

问题: 音乐播放器在博客刷新页面时会重新播放。  解决方法：引入pjax插件
打开cmd控制台，转到next主题的根目录：cd blog/themes/next ,安装pjax模块
安装代码：git clone https://github.com/theme-next/theme-next-pjax source/lib/pjax
接着在next主题的_config.yml文件中启用pjax模块，就解决了。

 1.5音乐播放器的位置调整(此优化需要打开主题的自定义调整，此处不再叙述)
 由于&lt;iframe&gt;标签本身是一个独立的文档嵌入，无法在其内部修改属性。
 但我们可以通过修改&lt;iframe&gt;的外部容器(比如一个&lt;div&gt;元素)的css样式实现
 首先给&lt;div&gt;元素添加一个类名，修改之前插入到外链代码为：
 
 然后打开 blog/source/_data/styles.styl 写如下代码：
 .music-player-container
 &#123;
    margin-top: 20px;
 &#125;
 此代码中 margin-top: 20px;就修改了音乐播放器距离顶部的位置
 其他属性根据读者的需要自行修改，此处不再赘述。
</code></pre>
]]></content>
      <tags>
        <tag>next主题美化</tag>
      </tags>
  </entry>
  <entry>
    <title>关于暑假见习的一些感想和夏日闲谈</title>
    <url>/2024/08/22/%E5%85%B3%E4%BA%8E%E6%9A%91%E5%81%87%E8%A7%81%E4%B9%A0%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%83%B3%E5%92%8C%E9%97%B2%E8%B0%88/</url>
    <content><![CDATA[<p>我喜欢夏天的云，因为它看上去是那么的浓烈，触手可及。</p>
<p>现在暑假已经接近尾声了，夏天的云似乎也已经消散。</p>
<p>我知道，夏天正在消逝。</p>
<p>就好比手中的冰淇淋，逐渐融化。</p>
<span id="more"></span>

<p>夏天就要过去，好似从小到大都是这样。</p>
<p>翻看以前的说说，永远对夏日有着一丝依恋。</p>
<p>或许是因为我对过去的怀念吧。</p>
<p>我永远记得 在悠长的夏日里 </p>
<p>柳堡镇公园的凉亭下，我们一群人围着打三国杀。</p>
<p>清凉的空调房里，几个人坐在一起打街机，造梦西游3。</p>
<p>亦或是，去外公家划一条小船，在荷藕塘里找莲子。</p>
<p>这些都是什么时候的事呢? 大概十年前吧。</p>
<p>谈回现在，这个暑假，我在柳堡镇政府里见习了一个月。</p>
<p>做了些事情，涨了些见识。</p>
<p>最后还有幸参加了宝应县大学生暑期结业仪式。</p>
<p>总的来说，家乡对于我们是非常照顾的。</p>
<p>各种各样的人才政策也逐渐出台。</p>
<p>至少对我而言，我希望大学毕业后能够回到家乡找一份工作。</p>
<p>我依稀记得初中看过一本书，叫《云边有个小卖部》</p>
<p>对于刘十三这样的小镇青年来说，他想考上大学，去大城市生活。</p>
<p>但生活却有种种的不如意，最后是故乡给了他无限的温柔。</p>
<p>在南京生活了一年，虽然也没出去玩过几次。</p>
<p>但我觉得大城市与家乡的区别很简单。</p>
<p>可能就是柳堡少了蜜雪冰城吧，不能天天吃冰淇淋。</p>
<p>至于大人们考虑的教育，医疗资源丰富，基础设施，娱乐设施完备等。宝应也是具备的。</p>
<p>最后，还是聊聊政治吧。</p>
<p>与其说是政治，倒不如说是对当下的一些看法。</p>
<p>最近有什么事情呢？</p>
<p>法官王佳佳被杀案，邯郸银行董事长被人捅伤致死，苏州马翔宇举报贪污。</p>
<p>对于一些人来说，有些事情看多了，倒也淡然了。当然有人也压根不了解。</p>
<p>以前我也许会锐评一番。</p>
<p>现在嘛，我只能说，存在即合理。</p>
]]></content>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>诗</title>
    <url>/2024/08/04/%E5%8F%A4%E6%9C%88%E6%96%B9%E6%BA%90-%E5%A4%A7%E7%88%B1%E4%BB%99%E5%B0%8A%E8%AF%AD%E5%BD%95/</url>
    <content><![CDATA[<ul>
<li>大爱仙尊&#x2F;炼天魔尊</li>
</ul>
<div style="display:flex; align-items:center;">
    <div style="margin-right:100px;">
        <img class="image " src="\images\gy2.jpg" alt="gy" style="width:400px; height:auto;">
    </div>
    <div>
        <p>落魄谷中寒风吹，春秋蝉鸣少年归。</p>
        <p>荡魂山处石人泪，定仙游走魔向北。</p>
        <p>逆流河上万仙退，爱情不敌坚持泪。</p>
        <p>宿命天成命中败，仙尊悔而我不悔。</p>
        <p>早岁已知世事艰，仍许飞鸿荡云间。</p>
        <p>一路寒风身如絮，命海沉浮客独行。</p>
        <p>千磨万击心铸铁，殚精竭虑铸一剑。</p>
        <p>今朝剑指叠云处，炼蛊炼人还炼天！</p>
    </div>
</div>


]]></content>
      <tags>
        <tag>古月方源/蛊真人</tag>
      </tags>
  </entry>
  <entry>
    <title>Mincraft启动器及mod安装</title>
    <url>/2024/08/03/Mincraft%E5%90%AF%E5%8A%A8%E5%99%A8%E5%8F%8Amod%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p>关于我的世界启动器有很多。我记得我小时候玩的最欢乐的一段时间必备我的世界三件套：我的世界盒子，我的世界联机平台，我的世界游戏本体。<br>后来随着越来越多的人意识到版权的重要性，加之网易代理国内版的我的世界，这些都没了。</p>
<span id="more"></span>
<h4 id="Minecraft启动器"><a href="#Minecraft启动器" class="headerlink" title="Minecraft启动器"></a>Minecraft启动器</h4><p>Minecraft启动器是一个用于启动和管理Minecraft游戏的应用程序。以下是几种常见的Minecraft启动器：</p>
<ul>
<li>官方启动器（Official Launcher）：官方启动器由Mojang Studios提供，可从Minecraft官方网站下载。它支持Java版Minecraft，并提供登录、版本管理和模组支持等功能。</li>
<li>Minecraft启动器（Minecraft Launcher）：这是基岩版Minecraft的官方启动器，可从各平台的应用商店（如Windows Store、App Store和Google Play）下载。它允许玩家登录并启动基岩版Minecraft，也可以管理下载的内容和游戏设置。</li>
<li>第三方启动器：除了官方启动器外，还有一些第三方启动器可供选择，如HMCL、PCL2等。这些启动器提供了额外的功能和自定义选项，例如模组管理和不同版本的支持。<br>(<del>以上这些来自网络介绍</del>)<br>下面是我个人的体验：</li>
</ul>
<ol>
<li><p>网易版：有硬性远程联机需求的话只能玩这个了。  我的评价是把国内我的世界弄得乌烟瘴气的。</p>
</li>
<li><p>PCL2启动器：这是我非常推荐的。<br>介绍：PCL2 是 Plain Craft Launcher 2 的简称，是由 龙腾猫跃 开发的一款我的世界启动器。</p>
</li>
</ol>
<ul>
<li>优点：很方便，它集成了众多游戏版本、Mod、整合包的相关内容。</li>
<li>缺点：没法远程连接(具体开服务器我也不会&lt;(。_。)&gt;)。只能实现局域网连接，但我在宿舍里试过，像校园网那种大型局域网也不是很稳定。开个人热点也一样。<br>  一般只适合同学或朋友家里连同一个路由器才比较稳定。</li>
</ul>
<p>这是下载链接：<a href="https://mod.3dmgame.com/mod/194985">PCL2启动器下载</a><br>爱发电没了，这是3DM官网下载的，可放心食用。</p>
<p>以下是一些介绍：</p>
<p>运行界面：</p>
<p style="text-align: center;">
    <img src="\images\pcl2启动.png" alt="pcl2">
</p>

<ul>
<li><p>下载方面：</p>
<ul>
<li>光影插件：OptiFine OptiFine又名高清修复，它可以安装光影，使用高清材质，并且大幅提高游戏性能(古董机建议别下)</li>
<li>mod插件：常用的有两种：Forge和Fabric ，他们是mod加载器，下载mod前记得看下对应的mod插件</li>
</ul>
</li>
<li><p>设置方面：建议隔离所有版本<br>原因：在PCL2启动器装MC游戏的时候，往往都有不同的版本来切换运行，但是这里有个问题就是一些游戏MOD不想跟别的版本通用，因为很容易导致MOD冲突，游戏崩溃。</p>
</li>
</ul>
<p>补充：我一般都玩的离线版，正式版没买也没登过，第三方服务器登录页不了解。</p>
<hr>
<ol start="3">
<li>HMCL启动器：以前玩过，感觉不如pcl2</li>
</ol>
<p>这是下载链接：<a href="https://ci.huangyuhui.net/job/HMCL-stable/">HMCL启动器下载</a></p>
<p>注：改启动器需要安装JAVA才可使用,自己可以根据自己的电脑操作位数下载相应的版本  <a href="https://www.java.com/zh-CN/">JAVA官网</a></p>
]]></content>
      <tags>
        <tag>Mincraft</tag>
      </tags>
  </entry>
  <entry>
    <title>序</title>
    <url>/2024/08/01/%E5%BA%8F/</url>
    <content><![CDATA[<hr>
<p>建立博客对于每个人而言，都有不一样的意义。在建立此博客前，我上网翻了很多人的博客，<br>大部分都是已经断更的，有的人已经工作，或许忘记了他们的博客，有的和我一样，还是学<br>生，或许一时兴起建立博客后就不再继续更新了。当然，我也看见了一些人的博客创作的非<br>常优秀，无论是css样式和其他功能的实现，还是每篇文章的技术解析。对我而言，我其实<br>想把这个博客当做记录我生活的一个工具。我或许会写一些游戏的攻略，记录一下大学生活<br>的美好瞬间，也可能像其他人一样，写一些电脑技术的学习或问题的解决的办法。当然，目<br>前来说，我无论是是思想上还是技术上都不怎么成熟，希望我能坚持学习下去，因为我觉得<br>这些都很有趣，以后或许等我工作了，这未尝不是一种宝藏。(<del>赛博记事本了属于是</del>)<br>而对于正在浏览本站的你来说，也可以四处逛逛，看看有什么有趣或有用的东西。</p>
]]></content>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo指令以及markdown使用方法</title>
    <url>/2024/08/01/hexo%E6%8C%87%E4%BB%A4%E4%BB%A5%E5%8F%8Amarkdown%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="hexo常用指令"><a href="#hexo常用指令" class="headerlink" title="hexo常用指令"></a>hexo常用指令</h2><h3 id="维护运行网站时忘记了可以看看"><a href="#维护运行网站时忘记了可以看看" class="headerlink" title="维护运行网站时忘记了可以看看"></a>维护运行网站时忘记了可以看看</h3><span id="more"></span>
<p>hexo g&#x2F;hexo generate:在hexo站点根目录下生成public文件<br>hexo clean:将生成的public文件删除<br>hexo s&#x2F;hexo server:启动hexo服务，生成网站的默认地址为：<a href="http://localhost:4000/">http://localhost:4000/</a><br>hexo d&#x2F;hexo deploy: 部署站点，在本地生成.deploy_git文件夹并将编译后的文件上传至Github<br>hexo n &lt;文章标题&gt;：在D:&#x2F;blog&#x2F;source&#x2F;_posts里生成一篇markdown文章<br>hexo n page tags:生成标签页<br>hexo n page categories：生成分类页</p>
<h2 id="markdown基本用法"><a href="#markdown基本用法" class="headerlink" title="markdown基本用法"></a>markdown基本用法</h2><h3 id="1-标题大小"><a href="#1-标题大小" class="headerlink" title="1.标题大小"></a>1.标题大小</h3><p>用#标记，随#的个数递增，一级标题最大，六级标题最小<br>#:一级标题<br>##:二级标题<br>###:三级标题<br>效果展示:</p>
<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h3 id="2-字体样式"><a href="#2-字体样式" class="headerlink" title="2.字体样式"></a>2.字体样式</h3><p>可用星号或下划线，由个数决定：单：斜体 双：粗体 三：粗斜体<br>接下来用*做示范</p>
<html> *这是斜体*</html>

<p><em>这是斜体</em></p>
<html> **这是粗体**</html>

<p><strong>这是粗体</strong></p>
<html> ***这是粗斜体***</html>

<p><em><strong>这是粗斜体</strong></em></p>
<h3 id="3-格式命令"><a href="#3-格式命令" class="headerlink" title="3.格式命令"></a>3.格式命令</h3><p>&lt;br&#x2F;&gt;:换行<br>“&gt;“:引用  </p>
<blockquote>
<p>这是一个引用</p>
</blockquote>
<p>插入链接:<a href="%E9%93%BE%E6%8E%A5%E5%9C%B0%E5%9D%80">链接名称</a><br>例：<a href="https://www.njupt.edu.cn/">NJUPT官网</a></p>
<p>插入图片：<br><img src="/%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="图片描述(选填)"></p>
<h2 id="分割线：-或"><a href="#分割线：-或" class="headerlink" title="分割线：*** 或- - -"></a>分割线：*** 或- - -</h2><p>删除线：在要删除的文字前后加上两个~~<br><del>这是被删除的文字</del></p>
<p>\ 可以显示符号本身</p>
<h3 id="4-列表与表格"><a href="#4-列表与表格" class="headerlink" title="4.列表与表格"></a>4.列表与表格</h3><p>无序列表：使用* + -,再加一个空格作为列表的标记</p>
<ul>
<li>无序列表</li>
</ul>
<p>有序列表：使用数字加上.，再加上一个空格作为标记</p>
<ol>
<li>有序列表</li>
<li>有序列表</li>
</ol>
<p>控制层级：在想控制的列表的列表符号前使用Tab键</p>
<ol>
<li>一级层级<ol start="2">
<li>二级层级<ol start="3">
<li>三级层级</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>表格使用|来分割单元格，使用-来分割表头和其他行<br>:-  表示将表格及单元格内容左对齐<br>-： 表示将表格及单元格内容右对齐<br>:-: 表示将表格及单元格内容居中</p>
<p>星露谷种子售价及收益</p>
<table>
<thead>
<tr>
<th align="left">作物</th>
<th align="left">种子价($)</th>
<th align="left">生长时间(天)</th>
<th align="left">普通品质售价($)</th>
</tr>
</thead>
<tbody><tr>
<td align="left">土豆</td>
<td align="left">50</td>
<td align="left">6</td>
<td align="left">80</td>
</tr>
<tr>
<td align="left">郁金香</td>
<td align="left">20</td>
<td align="left">6</td>
<td align="left">30</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>hexo框架博客搭建/markdown使用</tag>
      </tags>
  </entry>
  <entry>
    <title>建站成功感言</title>
    <url>/2024/07/31/%E5%BB%BA%E7%AB%99%E6%88%90%E5%8A%9F%E6%84%9F%E8%A8%80/</url>
    <content><![CDATA[<p>看了半天b站终于搭建好了，纪念一下！<br>接下来就是上传到github里，做些美化装饰了。<br><strong>以后这里就是的我的博客小站了，希望常来光顾呀 ヾ(๑╹ヮ╹๑)ﾉ”</strong></p>
]]></content>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>代码问题与解决方法</title>
    <url>/2024/08/06/%E4%BB%A3%E7%A0%81%E9%97%AE%E9%A2%98%E4%B8%8E%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h6 id="写代码报错改bug真的痛苦╥﹏╥"><a href="#写代码报错改bug真的痛苦╥﹏╥" class="headerlink" title="写代码报错改bug真的痛苦╥﹏╥"></a>写代码报错改bug真的痛苦╥﹏╥</h6><ol>
<li>数据结构书p28页：编写程序实现顺序表的逆置</li>
</ol>
<p>功能函数如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void Vert(SeqList *L)         </span><br><span class="line">&#123;</span><br><span class="line">    int temp;int i;</span><br><span class="line">    if(L-&gt;n%2==0)</span><br><span class="line">    &#123;</span><br><span class="line">        for(i=0;i&lt;L-&gt;n/2;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp=L-&gt;element[i];</span><br><span class="line">            L-&gt;element[i]=L-&gt;element[L-&gt;n-i];</span><br><span class="line">            L-&gt;element[L-&gt;n-i]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    else </span><br><span class="line">    &#123;</span><br><span class="line">        for(i=0;i&lt;(L-&gt;n-1)/2;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp=L-&gt;element[i];</span><br><span class="line">            L-&gt;element[i]=L-&gt;element[L-&gt;n-i];</span><br><span class="line">            L-&gt;element[L-&gt;n-i]=temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>想半天页没看出来哪里错了，一运行程序就开始死循环。然后问了文心一言。当顺序表元素个数为偶数时，程序运行没问题。当为奇数时，中间的元素 (L-&gt;n)&#x2F;2 作为中心点，在逆置后保留原位。但只循环到 (L-&gt;n-1)&#x2F;2 ，意味着最后一个元素没有交换。这是他的解释，后来我发现其实是我索引出错了，数组索引是从0开始的。中间的数无论是否交换都不变。</p>
<p>以下是一个统一的逆置标准：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void Vert(SeqList *L) </span><br><span class="line">&#123;</span><br><span class="line">    int temp;</span><br><span class="line">    int i;</span><br><span class="line">    for (i = 0; i &lt; L-&gt;n / 2; i++) </span><br><span class="line">    &#123;</span><br><span class="line">        temp = L-&gt;element[i];</span><br><span class="line">        L-&gt;element[i] = L-&gt;element[L-&gt;n - 1 - i];</span><br><span class="line">        L-&gt;element[L-&gt;n - 1 - i] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>代码问题与解决方法</tag>
      </tags>
  </entry>
  <entry>
    <title>开学纪要</title>
    <url>/2024/09/03/%E5%BC%80%E5%AD%A6%E7%BA%AA%E8%A6%81/</url>
    <content><![CDATA[<p>开学了，大二又要学了。</p>
<p>新学期好像没啥规划。</p>
<p>学就是了。</p>
]]></content>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>离散数学笔记</title>
    <url>/2024/09/03/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>无聊写的，懒得动笔。</p>
<p>我了个o((⊙﹏⊙))o. 老师连PPT都没发</p>
<h2 id="常见的离散数学符号：联结词：-¬-∧-∨-→-↔推出：⇒等值：⇔△-×-≁量词：∃-∀数学：≠-≥-≤集合关系∪-∩-∈-⊆-⊂-⊇-⊃-O"><a href="#常见的离散数学符号：联结词：-¬-∧-∨-→-↔推出：⇒等值：⇔△-×-≁量词：∃-∀数学：≠-≥-≤集合关系∪-∩-∈-⊆-⊂-⊇-⊃-O" class="headerlink" title="常见的离散数学符号：联结词： ¬ ∧ ∨ → ↔推出：⇒等值：⇔△ × ≁量词：∃ ∀数学：≠ ≥ ≤集合关系∪ ∩ ∈ ⊆ ⊂ ⊇ ⊃ Ø"></a>常见的离散数学符号：<br>联结词： ¬ ∧ ∨ → ↔<br>推出：⇒<br>等值：⇔<br>△ × ≁<br>量词：∃ ∀<br>数学：<br>≠ ≥ ≤<br>集合关系<br>∪ ∩ ∈ ⊆ ⊂ ⊇ ⊃ Ø</h2><h3 id="第1章-命题逻辑的基本概念"><a href="#第1章-命题逻辑的基本概念" class="headerlink" title="第1章 命题逻辑的基本概念"></a>第1章 命题逻辑的基本概念</h3><h4 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h4><p>命题是非真即假的陈述句,简单命题是最小的基本单位,其构成复合命题,悖论不是命题。</p>
<p>命题符号化，联结词也符号化。<br>¬：否定联结词</p>
<p>∧：合取联结词.规定p∧q为真当且仅当p与q同时为真</p>
<p>∨：析取联结词.规定p∨q为假当且仅当p与q同时为假<br>(或有两种：排斥或 相容或)</p>
<p>→：蕴涵联结词.p→q为假当且仅当p为真q为假。p为前件，q为后件。<br>注意点：<br>1.p→q：表示q是p的必要条件。<br>2.当p为假时，p→q必然为真<br>3.p→q为真仅表示p与q的取值关系为真，与其内在联系无关。</p>
<p>↔：等价联结词.规定p↔q为真当且仅当p与q同时为真或同时为假。</p>
<table>
<thead>
<tr>
<th align="left">p</th>
<th align="left">q</th>
<th align="left">¬p</th>
<th align="left">p∧q</th>
<th align="left">p∨q</th>
<th align="left">p→q</th>
<th align="left">p↔q</th>
</tr>
</thead>
<tbody><tr>
<td align="left">0</td>
<td align="left">0</td>
<td align="left">1</td>
<td align="left">0</td>
<td align="left">0</td>
<td align="left">1</td>
<td align="left">1</td>
</tr>
<tr>
<td align="left">0</td>
<td align="left">1</td>
<td align="left">1</td>
<td align="left">0</td>
<td align="left">1</td>
<td align="left">1</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">0</td>
<td align="left">0</td>
<td align="left">0</td>
<td align="left">1</td>
<td align="left">0</td>
<td align="left">0</td>
</tr>
<tr>
<td align="left">1</td>
<td align="left">1</td>
<td align="left">0</td>
<td align="left">1</td>
<td align="left">1</td>
<td align="left">1</td>
<td align="left">1</td>
</tr>
</tbody></table>
<p>ex：<br>p：北京比天津的人口多<br>q: 2+2&#x3D;4<br>r：乌鸦是白色的<br>求下列符合命题的真值<br>先算简单命题真值：p:1 q:1 r:0<br>(1) ((¬p∧q)∨(p∧¬q))→r   左0右0  A：1<br>(2) (q∨r)→(p→¬r)          左1右1  A：1<br>(3) (¬p∨r)↔(p∧¬r)        左0右1  A：0                           </p>
<h4 id="1-2-命题公式及其赋值"><a href="#1-2-命题公式及其赋值" class="headerlink" title="1.2 命题公式及其赋值"></a>1.2 命题公式及其赋值</h4><p>命题常项真值确定，命题变项是取值1或0的变元。<br>将命题变项用联结词和圆括号按照一定逻辑顺序联结起来的符号串称作合式公式<br>(1)单个命题变项是合式公式，并称为原子命题公式<br>(2)若A为合式公式，则¬A也为合式公式<br>(3)若A,B是合式公式，则 A∧B A∨B A→B A↔B 是合式公式<br>(4)有限次地应用(1)-(3)形成的符号串是合式公式</p>
]]></content>
      <tags>
        <tag>离散数学</tag>
      </tags>
  </entry>
  <entry>
    <title>关于网站建设的一些想法和遇见的问题</title>
    <url>/2024/08/02/%E7%BE%8E%E5%8C%96%E6%80%9D%E8%B7%AF%E5%92%8C%E6%83%B3%E6%B3%95/</url>
    <content><![CDATA[<h4 id="一些想法"><a href="#一些想法" class="headerlink" title="一些想法"></a>一些想法</h4><p>无数次推翻和重来，下载很多主题包，一个个修改内置参数，乱七八糟的css，js文件看的我头都大了，<br>接下来看能不能设置背景图吧，总感觉有些单调，一些其他功能比如钟表，音乐播放器后续在摸索吧。<br>〒_〒毕竟建站也不容易，与其说这是个技术博客，我更想把自己的一些想法或无聊琐事写下来，<br>或许用来写回忆录也不错。</p>
<p>未来我想实现以下的功能：</p>
<ol>
<li>给我的网页加一个音乐播放器，抄抄代码改改数据，应该不难。</li>
<li>网页背景与轮播图的实现，有点难，完全没思路，可能还要自己改参数手写代码。</li>
<li>网页时钟，算是装饰吧，可有可无，看后面规划吧。</li>
</ol>
<h4 id="关于待解决网页的访问问题"><a href="#关于待解决网页的访问问题" class="headerlink" title="关于待解决网页的访问问题"></a>关于待解决网页的访问问题</h4><ol>
<li>是hexo本地部署到github后部分css样式不显示，甚至不加载。<br>我不知道怎么办，以后解决了一定记录下来。</li>
<li>pc端和移动端看见的网页样式不一样！∑(O_O；) 简直令人费解，明明hexo clean &amp;&amp; g &amp;&amp; d了，理论上来自一个代码仓库怎么可能不一样呢???</li>
<li>由于Github是国外的，国内有点地方访问不了，加载速度也很慢。考虑到部署到gitee上，结果那个gitee pages功能到现在都没修好，我的评价是gitee就是个垃圾</li>
<li>目前只是静态网页，一切都已经预加载好了，未来考虑一下买个域名和服务器，学一下后端看看怎么回事吧。不过现在我连冰淇淋都很少买了，还得暑假打工挣点。</li>
</ol>
<p>另外：<br>感觉markdown用熟了是真的好！(◍•ᴗ•◍)♡♬</p>
<h2 id="好的，目前就更新到这边吧。"><a href="#好的，目前就更新到这边吧。" class="headerlink" title="好的，目前就更新到这边吧。"></a>好的，目前就更新到这边吧。</h2>]]></content>
      <tags>
        <tag>日志</tag>
      </tags>
  </entry>
  <entry>
    <title>算法与数据结构</title>
    <url>/2024/08/05/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h5 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h5><p>数组结构：常数复杂度:+ - * &#x2F; 位运算（与数据量无关）<br>链表结构：遍历-&gt;O(n)</p>
<h5 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h5><p>a<em>N^2+b</em>N+c -&gt; O(N^2): 只取最高阶项，且忽略系数 （设上限）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">selectionsort(int[] arr)&#123;</span><br><span class="line">     if(arr == NULL || arr.length&lt;2 ) &#123;return ;&#125;</span><br><span class="line">     for(int i=0; i &lt; arr.length - 1;i++)&#123;</span><br><span class="line">     int minindex =i;</span><br><span class="line">     for(j=i+1;j &lt; arr.length; j++)</span><br><span class="line">     &#123;</span><br><span class="line">        minindex = arr[j] &lt; arr[minindex] ? j : minindex ;</span><br><span class="line">     &#125;</span><br><span class="line">     swap(arr,i,minindex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<span id="more"></span>


<p>先看时间复杂度指标,时间复杂度一致时,需实际跑代码比较优劣。</p>
<p>额外空间复杂度O(1)</p>
<h5 id="冒泡排序-大的数依次向右移动-O-N-2"><a href="#冒泡排序-大的数依次向右移动-O-N-2" class="headerlink" title="冒泡排序: 大的数依次向右移动 O(N^2)"></a>冒泡排序: 大的数依次向右移动 O(N^2)</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bubblesort(int[] arr)</span><br><span class="line">&#123;</span><br><span class="line">    if(arr == NULL || arr.length &lt; 2) &#123;return;&#125;</span><br><span class="line">    for (int e = arr.lemgth-1 ; e&gt;0 ; e-- )</span><br><span class="line">    &#123;</span><br><span class="line">        for(int i=0; i &lt; e; i++ )</span><br><span class="line">        &#123;</span><br><span class="line">            if(arr[i]&gt;arr[i+1])</span><br><span class="line">                swap(arr,i,i+1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="异或运算：对0-1两个数进行操作；相同为0；不同为1；-或二进制的无进位相加"><a href="#异或运算：对0-1两个数进行操作；相同为0；不同为1；-或二进制的无进位相加" class="headerlink" title="异或运算：对0 1两个数进行操作；相同为0；不同为1； (或二进制的无进位相加)"></a>异或运算：对0 1两个数进行操作；相同为0；不同为1； (或二进制的无进位相加)</h5><ul>
<li>0 ^ N &#x3D; N ;  N ^ N &#x3D; 0</li>
<li>满足交换律和结合律 a^b&#x3D;b^a ; (a^b)^c &#x3D; a^(b^c)</li>
<li>同一组数据，异或结果与顺序无关。</li>
</ul>
<p>Q1：在一个数组中，已知只有一种数出现奇数次，其他数出现偶数次，如何找到？<br>Q2：在一个数组中，已知只有两种数出现奇数次，其他数出现偶数次，如何找到？<br>要求时间复杂度为O(N)<br>A1: int eor&#x3D;0 ; 提取数组的所有数，进行异或：arr[0]^arr[1]^……arr[n]&#x3D;结果<br>A2: 先所有数组进行异或 eor&#x3D;a^b，接着依次取出一个数与该结果异或，得到结果。</p>
<p> 位运算操作(二进制)：一个数取反加1，可以都到最右侧的数。</p>
<h5 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h5><p>0-0有序-&gt;0-1有序-&gt;0-2有序…………<br>4,5,6,7,3,2,1 -&gt; O(N^2)<br>1,2,3,4,5,6,7 -&gt; 0(N)<br>时间复杂度由算法最差情况的表现决定。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insertsort(int[] arr)</span><br><span class="line">&#123;</span><br><span class="line">    if(arr==null || arr.length &lt; 2) &#123;return;&#125;</span><br><span class="line">    for(int i=1; i &lt; arr.length ; i++ )</span><br><span class="line">    &#123;</span><br><span class="line">        for (int j=i-1;j &gt;= 0 &amp;&amp; arr[j]&gt;arr[j+1]; j-- )</span><br><span class="line">        &#123; swap(arr,j,j+1); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="二分法的详解与扩展"><a href="#二分法的详解与扩展" class="headerlink" title="二分法的详解与扩展"></a>二分法的详解与扩展</h5><ul>
<li><ol>
<li>在一个有序数组中，找到某个数的存在<br>  (1)遍历 O（N）<br>  (2)二分 O(log2(N))</li>
</ol>
</li>
<li><ol start="2">
<li>在一个有序数组中，找到&gt;&#x3D;某个数最左侧的位置<br>  ex: 1 2 2 2 2 3 3 3 3 4 4 4 4 4 4 4</li>
</ol>
</li>
<li><ol start="3">
<li>局部最小值问题<br>  在一个无序数组中，任何两个相邻的数不相等，求一个局部最小的过程 在时间复杂度上好于O(N)<br>  A：  1 3 5 7 4 9 6 3 2<br>  先看0位置和n-1位置是否存在局部最小，若不，则中间必有局部最小。<br>  接下来继续比较运用二分法。</li>
</ol>
</li>
</ul>
<h5 id="对数器"><a href="#对数器" class="headerlink" title="对数器"></a>对数器</h5><p>优秀方法(想测试的)：考虑时间复杂度，追求优解</p>
<p>普通方法：不考虑时间复杂度，只考虑解决问题</p>
<p>用随机样本产生器，对两种方法运行一遍，结果一样，则说明优秀方法正确。</p>
<h5 id="剖析递归行为及其时间复杂度的估算"><a href="#剖析递归行为及其时间复杂度的估算" class="headerlink" title="剖析递归行为及其时间复杂度的估算"></a>剖析递归行为及其时间复杂度的估算</h5><p>求一个数组的最大值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">process (int[] arr ,int L , int R)</span><br><span class="line">&#123;</span><br><span class="line">    if (L==R)</span><br><span class="line">    &#123;</span><br><span class="line">        return arr[L];</span><br><span class="line">    &#125;</span><br><span class="line">    int mid = L + ((R-L)/2); // 中点，防止内存溢出，高级：mid=L+(R-L)&gt;&gt;1 右移一位相当于除二    </span><br><span class="line">    int leftMax = process (arr,L,mid);</span><br><span class="line">    int rightMax = process (arr,mid+1,R);</span><br><span class="line">    return Math.max(leftMax , rightMax);</span><br><span class="line">&#125; </span><br><span class="line">调用：</span><br><span class="line">getMAX(int[] arr)</span><br><span class="line">&#123;return process(arr,0,arr.length-1);&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>master公式： T(N)&#x3D;a*T(N&#x2F;b)+O(N^d)<br>T(N)：母问题的数据量为N级别 T(N&#x2F;b):子问题的规模都是N&#x2F;b a:子问题的调用次数 O(N^d):除去子问题外剩下过程的时间复杂度</li>
</ul>
<ol>
<li>logb(a)&lt;d -&gt; O(N^d)</li>
<li>logb(a)&gt;d -&gt; O(N^logb(a))</li>
<li>logb(a)&#x3D;&#x3D;d -&gt; O(N^d*logN)</li>
</ol>
<h5 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h5><p>中点切一半，左右各自排好序，最后组合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">void mergeSort(int[] arr)</span><br><span class="line">&#123;</span><br><span class="line">    if(arr == null || arr.length &lt; 2)</span><br><span class="line">    &#123; return ;&#125;</span><br><span class="line">    process(arr, 0 , arr.length - 1);</span><br><span class="line">&#125;</span><br><span class="line">void process(int[] arr, int L, int R)</span><br><span class="line">&#123;</span><br><span class="line">    if(L==R)&#123;return ;&#125;</span><br><span class="line">    int mid = L + ((R-L)/2);</span><br><span class="line">    process (arr,L,mid);</span><br><span class="line">    process (arr,mid+1,R);</span><br><span class="line">    merge(arr,L,mid,R);</span><br><span class="line">&#125;</span><br><span class="line">void merge(int[] arr, int L ,int M, int R)</span><br><span class="line">&#123;</span><br><span class="line">    int[] help = new int[R-L+1];</span><br><span class="line">    int i=0;int p1=L;int p2 = M+1;</span><br><span class="line">    while (p1&lt;=M &amp;&amp; p2&lt;=R)</span><br><span class="line">    &#123; help[i++]=arr[p1]&lt;=arr[p2]?arr[p1++]:arr[p2++];&#125;</span><br><span class="line">    while (p1&lt;=M) &#123; help[i++]= arr[p2++]; &#125;</span><br><span class="line">    while (p2&lt;=R) &#123; help[i++]= arr[p2++]; &#125;</span><br><span class="line">    for(i=0;i&lt;help.length;i++) &#123; arr[L+i] = help[i]; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>时间复杂度： T(N) &#x3D; 2 * T(N&#x2F;2) + O(N) —&gt;   O(N*logN)<br>额外空间复杂度：O(N)</p>
<ul>
<li>扩展问题：小和问题和逆序对问题</li>
</ul>
<ol>
<li><p>小和问题：在一个数组中，每一个数左边比当前数小的数累加起来，叫做这个数组的小和,求一个数组的小和<br>ex: 1 3 4 2 5  -&gt; 0 + 1 + 1 + 3 + 1 + 1 + 3 + 4 + 2 &#x3D; 16<br>另一种思想： 左边有多少个数比该数大 4<em>1+2</em>3+1<em>4+1</em>2&#x3D;16</p>
</li>
<li><p>逆序对问题：在一个数组中，左边的数如果比右边的数大，则这两个数构成一个逆序对,打印所有的逆序对。</p>
</li>
</ol>
<p> b</p>
]]></content>
      <tags>
        <tag>算法与数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>闲聊</title>
    <url>/2024/08/12/%E9%97%B2%E8%81%8A/</url>
    <content><![CDATA[<p>三天没写blog了，本来放暑假也比较闲，也不想学习。最近在玩我的世界，搭建筑。记录一下。<br><strong>天空，即为极限！</strong></p>
<p style="text-align: center;">
    <img src="\images\我的世界1.png" alt="minecraft">
</p>]]></content>
      <tags>
        <tag>闲聊</tag>
      </tags>
  </entry>
</search>
